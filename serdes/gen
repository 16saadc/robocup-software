#!/usr/bin/python

# TODO:
#   Support code and real API
#   Enums and constants
#   Externals (for Point2d)
#   Support use of inner classes from any scope where they're available
#   Strings

from xml.dom.minidom import *

primitives = ['uint8', 'int8', 'uint16', 'int16', 'uint32', 'int32', 'uint64', 'int64', 'float', 'double']

class Generator:
    # True if body should be called along with declarations.
    # This also prevents bodyHeader and bodyTrailer from being used.
    combined = False
    
    indentLevel = 0
    indentString = ''
    
    def indent(self):
        self.indentLevel += 1
        self.indentString += '    '
    def unindent(self):
        self.indentLevel -= 1
        self.indentString = self.indentString[:-4]
    
    def sizetype(self, node):
        s = node.getAttribute('sizetype')
        if s == '':
            return 'uint32'
        return s
        
    def write(self, str = ''):
        print self.indentString + str
    
    def declareBegin(self):
        pass
    def declareStructBegin(self, node):
        pass
    def declareMember(self, node):
        pass
    def declareArray(self, node):
        pass
    def declareStructEnd(self, node):
        pass
    def declareEnd(self):
        pass
    
    def bodyBegin(self):
        pass
    def bodyStructBegin(self, node):
        pass
    def bodyMember(self, node):
        pass
    def bodyArray(self, node):
        pass
    def bodyStructEnd(self, node):
        pass
    def bodyEnd(self):
        pass

class CppGenerator(Generator):
    headerGuard = '_TEST_HPP_'
    
    def properType(self, type):
        # Translate int8 to int8_t, etc.
        if type in primitives and (type[0:3] == 'int' or type[1:4] == 'int'):
            type += '_t'
        return type
    
    ########
    # Declarations
    
    def declareBegin(self):
        self.write('#ifndef ' + self.headerGuard)
        self.write('#define ' + self.headerGuard)
        self.write()
        self.write('#include <vector>')
        self.write('#include <Serialization.hpp>')
        self.write()
    
    def declareStructBegin(self, node):
        name = node.getAttribute('typename')
        self.write('class ' + name)
        self.write('{')
        self.indent()
        self.write('public:')
        self.write()
    
    def declareMember(self, node):
        type = self.properType(node.getAttribute('type'))
        name = node.getAttribute('name')
        self.write(type + ' ' + name + ';')
    
    def declareArray(self, node):
        type = self.properType(node.getAttribute('type'))
        name = node.getAttribute('name')
        size = node.getAttribute('size')
        self.write('std::vector<' + type + '> ' + name + ';')
    
    def declareStructEnd(self, node):
        self.write()
        self.write('void write(Serialization::Buffer &buf);')
        self.write('void read(const Serialization::Buffer &buf);')
        self.unindent()
        self.write('};')
        self.write()
    
    def declareEnd(self):
        self.write('#endif // ' + self.headerGuard)
    
    ########
    # Body
    
    def bodyStructBegin(self, node):
        name = node.getAttribute('typename')
        parent = node.parentNode
        while parent != None and parent.nodeType == parent.ELEMENT_NODE:
            name = parent.getAttribute('typename') + '::' + name
            parent = parent.parentNode
        
        self.write('void ' + name + '::write(Serialization::Buffer &buf)')
        self.write('{')
        self.indent()
    
    def writeBodyMember(self, node, indexed):
        type = node.getAttribute('type')
        name = node.getAttribute('name')
        if indexed:
            name += '[i]'
        
        if type in primitives:
            self.write('buf.write(' + name + ');')
        else:
            self.write(name + '.write(buf);')
        
    def bodyMember(self, node):
        type = node.getAttribute('type')
        name = node.getAttribute('name')
        
        if node.nodeName == 'member':
            self.writeBodyMember(node, False)
        elif node.nodeName == 'array':
            type = node.getAttribute('type')
            name = node.getAttribute('name')
            sizetype = self.sizetype(node)
            
            if type in primitives:
                self.write('buf.writePrimitiveArray<' + sizetype + '_t>(' + name + ');')
            else:
                self.write('buf.writeClassArray<' + sizetype + '_t>(' + name + ');')
        
    def bodyStructEnd(self, node):
        self.unindent()
        self.write('}')
        self.write()
    
class PythonGenerator(Generator):
    combined = True
    
    # True if in the __init__ method
    init = False
    
    def declareBegin(self):
        self.write('from Serialization import *')
        self.write()
        
    def declareStructBegin(self, node):
        name = node.getAttribute('typename')
        self.write('class ' + name + ':')
        self.indent()
    
    def declareMember(self, node):
        if not self.init:
            self.init = True
            self.write('def __init__(self):')
            self.indent()
        
        type = node.getAttribute('type')
        name = node.getAttribute('name')
        if type in primitives:
            default = '0'
        else:
            default = type + '()'
        self.write('self.' + name + ' = ' + default)
    
    def declareArray(self, node):
        if not self.init:
            self.init = True
            self.write('def __init__(self):')
            self.indent()
        
        name = node.getAttribute('name')
        size = node.getAttribute('size')
        if size == '':
            self.write(name + ' = []')
        else:
            type = node.getAttribute('type')
            self.write(name + ' = [' + type + '() for i in range(' + size + ')]')
    
    def declareStructEnd(self, node):
        if self.init:
            self.unindent()
            self.init = False
        
        self.unindent()
        self.write()
    
    def bodyStructBegin(self, node):
        if self.init:
            self.unindent()
            self.init = False
        
        self.write()
        self.write('def write(self, buf):')
        self.indent();
    
    def bodyMember(self, node):
        type = node.getAttribute('type')
        name = node.getAttribute('name')
        
        if node.nodeName == 'member':
            if type in primitives:
                self.write('buf.write_' + type + '(self.' + name + ');')
            else:
                self.write(name + '.write(buf);')
        elif node.nodeName == 'array':
            sizetype = self.sizetype(node)
            
            size = node.getAttribute('size')
            if size == '':
                size = 'len(self.' + name + ')'
                self.write('buf.write_' + sizetype + '(' + size + ');')
            
            self.write('for i in self.' + name + ':')
            self.indent()
            self.write('i.write(buf)')
            self.unindent()
    
    def bodyStructEnd(self, node):
        self.unindent()
    
########

def structBody(node):
    gen.bodyStructBegin(node)
    for child in node.childNodes:
        if child.nodeType == node.ELEMENT_NODE:
            gen.bodyMember(child)
    gen.bodyStructEnd(node)

gen = CppGenerator()
#gen = PythonGenerator()

structs = []

def declareNode(node):
    if node.nodeName == 'struct':
        name = node.getAttribute('typename')
        structs.append(node)
        gen.declareStructBegin(node)
        for child in node.childNodes:
            if child.nodeType == node.ELEMENT_NODE:
                declareNode(child)
        if gen.combined:
            structBody(node)
        gen.declareStructEnd(node)
    elif node.nodeName == 'member':
        gen.declareMember(node)
    elif node.nodeName == 'array':
        gen.declareArray(node)

dom = parse('test.xml')

# Declaration
gen.declareBegin()
declareNode(dom.getElementsByTagName('struct')[0])
gen.declareEnd()

# Body
gen.bodyBegin()
if not gen.combined:
    for node in structs:
        structBody(node)
gen.bodyEnd()
